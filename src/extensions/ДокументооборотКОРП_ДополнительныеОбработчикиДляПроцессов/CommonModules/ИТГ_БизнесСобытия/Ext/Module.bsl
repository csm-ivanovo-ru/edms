////////////////////////////////////////////////////////////////////////////////
// Программный интерфейс бизнес-событий

#Область ПрограммныйИнтерфейс

// Отрабатывает событие регистрации входящего документа: если входящий документ создан
//  на основании входящего письмо, тогда создаёт исходящее письмо в ответ на входящее и сообщает
//  отправителю письма о регистрации входящего документа
//
// Параметры:
//  Событие					 - 	 - обрабатываемое бизнес событие
//  ОбработчикПредставление	 - Строка - представление обработчика событий (для журнала регистрации)
//
Процедура ОбработатьСобытиеСообщитьОтправителюОРегистрацииВходящегоДокумента(Знач Событие, Знач ОбработчикПредставление) Экспорт
	
	Контекст = "ИТГ_БизнесСобытия.ОбработатьСобытиеСообщитьОтправителюОРегистрацииВходящегоДокумента";
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		Событие.ВидСобытия = Справочники.ВидыБизнесСобытий.РегистрацияВходящегоДокумента
		Или Событие.ВидСобытия = Справочники.ВидыБизнесСобытий.ПеререгистрацияВходящегоДокумента,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработчик событий ""%1"" предназначен для обработки событий регистрации
				|и перерегистрации входящих документов. 
				|Текущее событие имеет вид ""%2"". 
				|Исправьте подписку на события для обработчика ""%1""'"),
			ОбработчикПредставление, Строка(Событие.ВидСобытия)),
		Контекст);
		
	ОбщегоНазначенияКлиентСервер.Проверить(
		ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Событие.Источник),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработчик событий ""%1"" предназначен для обработки событий регистрации
				|и перерегистрации входящих документов. 
				|Источник события не является входящим документом и имеет тип ""%2""'"),
			ОбработчикПредставление, Метаданные.НайтиПоТипу(ТипЗнч(Событие.Источник)).ПолноеИмя()),
		Контекст);
		
	ВходящийДокумент = Событие.Источник;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВходящийДокумент,
		"ДатаРегистрации, РегистрационныйНомер, ИсходящаяДата, ИсходящийНомер");
	
	Если Не ЗначениеЗаполнено(РеквизитыДокумента.РегистрационныйНомер) Тогда
		Возврат;
	КонецЕсли;
	
	ВходящееПисьмо = СвязиДокументов.ПолучитьСвязанныйДокумент(ВходящийДокумент, Справочники.ТипыСвязей.НаОснованииПисьма);
	
	Если ВходящееПисьмо = Неопределено Тогда
		// входящий документ создан не на основании входящего письма
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("ОбработкаБизнесСобытий.СообщитьОтправителюОРегистрацииВходящегоДокумента",
		УровеньЖурналаРегистрации.Информация, , ,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Начата обработка события регистрации входящего документа ""%3"" обработчиком ""%1"". 
				|Контекст ""%2""'"),
			ОбработчикПредставление, Контекст, Строка(ВходящийДокумент)));
			
	ОбщегоНазначенияКлиентСервер.Проверить(
		ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ВходящееПисьмо),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Тип связи ""%3"" предназначен для связи входящего документа с входящим письмом, 
				|которым документ был переслан.
				|Входящий документ ""%2"" связан указанным типом связи с объектом типа ""%4""'"),
			ОбработчикПредставление, Строка(ВходящийДокумент),
			Строка(Справочники.ТипыСвязей.ПересланоПисьмом), Метаданные.НайтиПоТипу(ТипЗнч(ВходящееПисьмо)).ПолноеИмя()),
		Контекст);
		
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Автоматический);
	Попытка
		
		ИсходящееПисьмо = Документы.ИсходящееПисьмо.СоздатьДокумент();
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Команда", "Ответить");
		ЗначенияЗаполнения.Вставить("Письмо", ВходящееПисьмо);
		ИсходящееПисьмо.Заполнить(ЗначенияЗаполнения);
		
		ИсходящееПисьмо.УчетнаяЗапись = ВходящееПисьмо.УчетнаяЗапись;
		
		ИспользованныйШаблон = Неопределено;
		СодержаниеПисьмаДоАвтоответа = ВстроеннаяПочтаСервер.СформироватьТекстИсходящегоПисьма(
			ВходящееПисьмо,
			Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст,
			КодировкаТекста.UTF8,
			Перечисления.ТипыОтвета.ОтветНаПисьмо,
			ИспользованныйШаблон);
			
		// сформированный ответ содержит подпись для пользователя, от имени которого запущено фоновое задание,
		// т.е. для администратора. Установим подпись для получателя входящего письма.
		//ШаблонПодписи = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ПодписьПриОтветеИПересылке");
		ШаблонПодписи = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ВстроеннаяПочта",
			"ПодписьПриОтветеИПересылке",
			Неопределено, ,
			ИсходящееПисьмо.Папка.Ответственный);
		Подпись = "";
		
		Если ТипЗнч(ШаблонПодписи) = Тип("СправочникСсылка.ШаблоныТекстов")	И ЗначениеЗаполнено(ШаблонПодписи) Тогда
			Подпись = Справочники.ШаблоныТекстов.ПолучитьТекстШаблона(ШаблонПодписи);
		КонецЕсли;
			
		// TODO: использовать шаблоны текстов из дополнительных настроек программы!
		// но при текущем режиме совместимости добавить константы невозможно...
		ШаблонАвтоответа = ?(ЗначениеЗаполнено(РеквизитыДокумента.ИсходящаяДата),
			Справочники.ШаблоныТекстов.НайтиСоздать_ШаблонАвтоответаПриРегистрацииВходящегоДокументаСНомеромИсходящего(),
			Справочники.ШаблоныТекстов.НайтиСоздать_ШаблонАвтоответаПриРегистрацииВходящегоДокумента());
		ШаблонАвтоответаТекст = Справочники.ШаблоныТекстов.ПолучитьТекстШаблона(ШаблонАвтоответа);
		
		ТекстАвтоответа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонАвтоответаТекст,
			Формат(РеквизитыДокумента.ДатаРегистрации, "ДЛФ=Д"), РеквизитыДокумента.РегистрационныйНомер,
			Формат(РеквизитыДокумента.ИсходящаяДата, "ДЛФ=Д"), РеквизитыДокумента.ИсходящийНомер);
			
		СодержаниеПисьма = ТекстАвтоответа + Символы.ПС + Подпись + Символы.ПС + СодержаниеПисьмаДоАвтоответа;
		ИсходящееПисьмо.УстановитьСодержаниеПисьма(СодержаниеПисьма);
		
		ИсходящееПисьмо.ПодготовленоКОтправке = ТекущаяДатаСеанса();
		ИсходящееПисьмо.ДополнительныеСвойства.Вставить("ВыполняетсяОтправка", Истина);
		
		ИсходящееПисьмо.Записать();
							
		СвязиДокументов.УстановитьСвязь(
			ИсходящееПисьмо.Ссылка,
			Неопределено,
			ВходящееПисьмо,
			Справочники.ТипыСвязей.ПисьмоОтправленоВОтветНа, , ,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Связь установлена обработчиком обработчиком ""%1"". 
					|Контекст ""%2""'"),
				ОбработчикПредставление, Контекст));
				
		ЗаписьЖурналаРегистрации("ОбработкаБизнесСобытий.СообщитьОтправителюОРегистрацииВходящегоДокумента",
			УровеньЖурналаРегистрации.Информация, ,
			ИсходящееПисьмо.Ссылка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отправлен автоответ о регистрации входящего документа ""%3"" обработчиком ""%1"". 
					|Контекст ""%2""'"),
				ОбработчикПредставление, Контекст, Строка(ВходящийДокумент)));
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	

#КонецОбласти
