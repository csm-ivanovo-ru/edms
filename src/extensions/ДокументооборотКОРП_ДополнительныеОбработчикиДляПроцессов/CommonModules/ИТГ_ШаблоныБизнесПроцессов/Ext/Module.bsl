#Область ПрограммныйИнтерфейс

// Проверяет, находится ли руководитель подразделения, указанного в документе,
//  в числе исполнителей задач по документу, как по основному предмету
//  (только по процессам исполнения, рассмотрения, ознакомления).
//  Применяется в условиях маршрутизации процессов.
//
// Параметры:
//  Документ - СправочникСсылка	 - ссылка на внутренний либо входящий документ
// 
// Возвращаемое значение:
//  Булево - Истина, если документ на исполнении, Ложь - если нет
//
Функция ПроверитьРуководительПодразделенияВЧислеИсполнителей(Знач Документ) Экспорт
		
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РуководительПодразделения = ПолучитьРуководителяПодразделенияДокумента(Документ);
	
	Если Не ЗначениеЗаполнено(РуководительПодразделения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РуководительНайденВЧислеИсполнителей = Ложь;
	
	Если ТипЗнч(РуководительПодразделения) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		РуководителиПодразделения = РегистрыСведений.ИсполнителиЗадач.ИсполнителиРоли(РуководительПодразделения);
	Иначе
		РуководителиПодразделения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РуководительПодразделения);
	КонецЕсли;
	
	АктивныеИсполнители = ПолучитьИсполнителейДокументаАктивных(Документ);
	Для Каждого Руководитель Из РуководителиПодразделения Цикл
		Для Каждого Исполнитель Из АктивныеИсполнители Цикл
			Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				РуководительНайденВЧислеИсполнителей = РегистрыСведений.ИсполнителиЗадач.ИсполнителиРоли(Исполнитель).Найти(Руководитель) <> Неопределено;
			Иначе
				РуководительНайденВЧислеИсполнителей = (Руководитель = Исполнитель);
			КонецЕсли;
			РуководительНайденВЧислеИсполнителей = РегистрыСведений.ИсполнителиЗадач.ИсполнителиРоли(Исполнитель).Найти(Руководитель) <> Неопределено;
			Если РуководительНайденВЧислеИсполнителей Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат РуководительНайденВЧислеИсполнителей;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_АвтоПодстановкиДляПроцессов

// Получает полную роль делопроизводителя подразделения, осуществляющего делопроизводство по документу.
//
// Параметры:
//  БизнесПроцессОбъект	 - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//  							вычисляется автоподстановка
//  ИмяПредмета			 - СправочникСсылка.ИменаПредметов	 - имя предмета в процессе
// 
// Возвращаемое значение:
//  СправочникСсылка.ПолныеРоли - .
//
Функция ДелопроизводительПодразделенияДокумента(Знач БизнесПроцессОбъект, Знач ИмяПредмета) Экспорт
	ДокументСсылка = ПолучитьДокументИзПредметаПроцесса(БизнесПроцессОбъект, ИмяПредмета);
	ПолнаяРольДелопроизводителя = ПолучитьДелопроизводителяПодразделенияДокумента(ДокументСсылка);
	Возврат ПолнаяРольДелопроизводителя;
КонецФункции

// Получает полную роль руководителя подразделения, осуществляющего делопроизводство по документу.
//
// Параметры:
//  БизнесПроцессОбъект	 - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//  							вычисляется автоподстановка
//  ИмяПредмета			 - СправочникСсылка.ИменаПредметов	 - имя предмета в процессе
// 
// Возвращаемое значение:
//  СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи - 
//
Функция РуководительПодразделенияДокумента(Знач БизнесПроцессОбъект, Знач ИмяПредмета) Экспорт
	ДокументСсылка = ПолучитьДокументИзПредметаПроцесса(БизнесПроцессОбъект, ИмяПредмета);
	РуководительПодразделения = ПолучитьРуководителяПодразделенияДокумента(ДокументСсылка);
	Возврат РуководительПодразделения;
КонецФункции

// Получает массив исполнителей всех незавершённых задач по документу для процессов исполнения,
//  рассмотрения, ознакомления.
//
// Параметры:
//  БизнесПроцессОбъект	 - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//  							вычисляется автоподстановка
//  ИмяПредмета			 - СправочникСсылка.ИменаПредметов	 - имя предмета в процессе
// 
// Возвращаемое значение:
//  Массив - массив исполнителей
//
Функция ИсполнителиДокументаАктивные(Знач БизнесПроцессОбъект, Знач ИмяПредмета) Экспорт
	ДокументСсылка = ПолучитьДокументИзПредметаПроцесса(БизнесПроцессОбъект, ИмяПредмета);
	АктивныеИсполнители = ПолучитьИсполнителейДокументаАктивных(ДокументСсылка);
	Возврат АктивныеИсполнители;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает полную роль делопроизводителя подразделения, осуществляющего делопроизводство по документу.
//
// Параметры:
//  Документ - СправочникСсылка	 - ссылка на документ
// 
// Возвращаемое значение:
//  СправочникСсылка.ПолныеРоли - .
//
Функция ПолучитьДелопроизводителяПодразделенияДокумента(Знач Документ) 
	// TODO: в дальнейшем - Справочники.РолиИсполнителей.ДелопроизводительПодразделения;
	Роль = Справочники.РолиИсполнителей.НайтиСоздатьРоль_ДелопроизводительПодразделения();
	Возврат ПолучитьПолнуюРольСОбъектамиАдресацииПоДокументу(Роль, Документ);
КонецФункции

// Получает полную роль руководителя подразделения, осуществляющего делопроизводство по документу.
//
// Параметры:
//  Документ - СправочникСсылка	 - ссылка на документ
// 
// Возвращаемое значение:
//  СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи - 
//
Функция ПолучитьРуководителяПодразделенияДокумента(Знач Документ)
	
	// TODO: в дальнейшем - Справочники.РолиИсполнителей.РуководительПодразделения;
	Роль = Справочники.РолиИсполнителей.НайтиСоздатьРоль_РуководительПодразделения();
	ПолнаяРольРуководителяПодразделения = ПолучитьПолнуюРольСОбъектамиАдресацииПоДокументу(Роль, Документ);
	
	Если БизнесПроцессыИЗадачиСервер.ЕстьИсполнителиРоли(ПолнаяРольРуководителяПодразделения) Тогда
		Возврат ПолнаяРольРуководителяПодразделения;
	Иначе
		Руководитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Подразделение.Руководитель");
		Возврат Руководитель;
	КонецЕсли;

КонецФункции

// Получает массив исполнителей всех незавершённых задач по документу для процессов исполнения,
//  рассмотрения, ознакомления.
//
// Параметры:
//  Документ - СправочникСсылка	 - ссылка на документ
// 
// Возвращаемое значение:
//  Массив - массив исполнителей
//
Функция ПолучитьИсполнителейДокументаАктивных(Знач Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка,
		|	ЗадачаИсполнителя.ТекущийИсполнитель КАК ТекущийИсполнитель
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|		ПО ЗадачаИсполнителя.Ссылка = ЗадачаИсполнителяПредметы.Ссылка
		|ГДЕ
		|	ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И (
		|		(ЗадачаИсполнителя.БизнесПроцесс ссылка БизнесПроцесс.Исполнение)
		|		ИЛИ (ЗадачаИсполнителя.БизнесПроцесс ссылка БизнесПроцесс.Ознакомление)
		|		ИЛИ (ЗадачаИсполнителя.БизнесПроцесс ссылка БизнесПроцесс.Рассмотрение)
		|	)
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|	И ЗадачаИсполнителя.ТекущийИсполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ЗадачаИсполнителя.ТекущийИсполнитель <> ЗНАЧЕНИЕ(Справочник.ПолныеРоли.ПустаяСсылка)
		|	И ЗадачаИсполнителя.ТекущийИсполнитель <> НЕОПРЕДЕЛЕНО
		|	И ЗадачаИсполнителяПредметы.РольПредмета = ЗНАЧЕНИЕ(Перечисление.РолиПредметов.Основной)
		|	И ЗадачаИсполнителя.Предметы.Предмет = &Предмет";
		
	Запрос.УстановитьПараметр("Предмет", Документ);
	
	Выборка = Запрос.Выполнить();
	АктивныеИсполнители = Выборка.Выгрузить().ВыгрузитьКолонку("ТекущийИсполнитель");
	
	Возврат АктивныеИсполнители;
		
КонецФункции

// Получает полную роль, заполняя объекты адресации (организация, подразделение) данными документа.
//
// Параметры:
//  Роль - СправочникСсылка.РолиИсполнителей - ссылка на роль, для которой требуется получить полную роль
//  Документ - СправочникСсылка	 - ссылка на документ
// 
// Возвращаемое значение:
//  СправочникСсылка.ПолныеРоли - .
//
Функция ПолучитьПолнуюРольСОбъектамиАдресацииПоДокументу(Знач Роль, Знач Документ) 
	
	Контекст = "ИТГ_ШаблоныБизнесПроцессов.ПолучитьПолнуюРольСОбъектамиАдресацииПоДокументу";
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(Документ),
		НСтр("ru = 'Недопустимое значение параметра Документ, 
			|Ожидалась ссылка на документ'"),
		Контекст);
		
	МассивРеквизитовДокумента = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Подразделение");
	
	ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	
	Если ИспользоватьУчетПоОрганизациям Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоВнутреннийДокумент(Документ) Тогда
			ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидДокумента");
			ДляДокументовЭтогоВидаИспользуетсяУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям",
				Новый Структура("ВидВнутреннегоДокумента", ВидДокумента));
			ОбщегоНазначенияКлиентСервер.Проверить(
				ДляДокументовЭтогоВидаИспользуетсяУчетПоОрганизациям,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Вычисление полной роли невозможно.
						|Включен учёт по организациям.
						|Однако, для внутренних документов вида ""%1"" учёт по организациям не предусмотрен.
						|Ожидалась ссылка на документ'"),
					Строка(ВидДокумента)),
				Контекст);
		КонецЕсли;
		МассивРеквизитовДокумента.Добавить("Организация");
	КонецЕсли;
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, МассивРеквизитовДокумента);
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ЗначениеЗаполнено(РеквизитыДокумента.Подразделение),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вычисление полной роли невозможно. В документе ""%1"" не указано подразделение'"),
			Строка(Документ)),
		Контекст);
	
	Если ИспользоватьУчетПоОрганизациям Тогда 
			
		ОбщегоНазначенияКлиентСервер.Проверить(
			ЗначениеЗаполнено(РеквизитыДокумента.Организация),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вычисление полной роли невозможно. В документе ""%1"" не указана организация'"),
				Строка(Документ)),
			Контекст);
			
		ПолнаяРоль = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
			Роль,
			РеквизитыДокумента.Организация,
			РеквизитыДокумента.Подразделение);
			
	Иначе
			
		ПолнаяРоль = Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
			Роль,
			РеквизитыДокумента.Подразделение);
			
	КонецЕсли;
		
	Возврат ПолнаяРоль;
	
КонецФункции

// Получает ссылку на документ из указанного предмета указанного процесса.
//
// Параметры:
//  БизнесПроцессОбъект	 - БизнесПроцессОбъект.<Тип бизнес процесса> - процесс, для которого
//  							вычисляется автоподстановка
//  ИмяПредмета			 - СправочникСсылка.ИменаПредметов	 - имя предмета в процессе
// 
// Возвращаемое значение:
//  СправочникСсылка - ссылка на документ.
//
Функция ПолучитьДокументИзПредметаПроцесса(Знач БизнесПроцессОбъект, Знач ИмяПредмета)
	
	Контекст = "ИТГ_ШаблоныБизнесПроцессов.ПолучитьДокументИзПредметаПроцесса";
	
	СтрокаПредмета = БизнесПроцессОбъект.Предметы.Найти(ИмяПредмета, "ИмяПредмета");
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		СтрокаПредмета <> Неопределено,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найден предмет ""%1"" процесса'"),
			Строка(ИмяПредмета)),
		Контекст);
		
	ОбщегоНазначенияКлиентСервер.Проверить(
		ЗначениеЗаполнено(СтрокаПредмета.Предмет),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Автоподстановка не может быть выполнена, так как не указан предмет ""%1"" процесса'"),
			Строка(ИмяПредмета)),
		Контекст);
		
	ДокументСсылка = СтрокаПредмета.Предмет;
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ДелопроизводствоКлиентСервер.ЭтоСсылкаНаДокумент(ДокументСсылка),
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Автоподстановка не может быть выполнена, так как предмет ""%1"" процесса не является документом'"),
			Строка(ИмяПредмета)),
		Контекст);
		
	Возврат ДокументСсылка;
		
КонецФункции

#КонецОбласти
